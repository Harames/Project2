train <- read.csv("training.csv")
test = read.csv("testing.csv")
# Predictions for Fraud converted into Numerical data, 1 = Fraud, 0 = Not Fraud
train$FRAUD_NONFRAUD <- ifelse(train$FRAUD_NONFRAUD == "Fraud",1,0)
#look at the data
head(train)
head(test)
#Take out only the numerical data columns and look for any significant relationship
new_train = train[1:5]
new_train$FRAUD_NONFRAUD <- train$FRAUD_NONFRAUD
pairs(new_train)
#To make absolutely sure, look at coorelation values before creating the model
cor(new_train)
model1 = glm( as.factor(FRAUD_NONFRAUD) ~ TRAN_AMT + STATE_PRVNC_TXT, data = train, family = binomial )
#Scenario 3
set.seed(666)
smallData = sample(1:nrow(train), 20, replace=FALSE)
smallTrain = train[smallData,]
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
return(coef(summary(model)))
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
smallData
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
names(all_the_boots) = c("Tran_amt","State_Prvnc_txt")
head(all_the_boots)
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2])))
}
BS_estimate(500)
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
return(coef(summary(model)))
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:6,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:5,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
names(all_the_boots) = c("Tran_amt","State_Prvnc_txt")
head(all_the_boots)
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3],mean(all_the_boots[,4]))))
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
names(all_the_boots) = c("Pre","Tran","cust","dvc")
head(all_the_boots)
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3],mean(all_the_boots[,4]))))
}
BS_estimate(100)
names(all_the_boots) = c("Pre","Tran","cust","dvc")
head(all_the_boots)
all_the_boots = c()
names(all_the_boots) = c("Pre","Tran","cust","dvc")
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
names(all_the_boots) = c("Pre","Tran","cust","dvc")
head(all_the_boots)
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3],mean(all_the_boots[,4]))))
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
names(all_the_boots) = c("Pre","Tran","cust","dvc")
head(all_the_boots)
return(all_the_boots)
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3],mean(all_the_boots[,4]))))
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(all_the_boots)
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(all_the_boots)
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3],mean(all_the_boots[,4]))))
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3]),mean(all_the_boots[,4])))
}
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
print(summary(model))
return(coef(summary(model))[2:5,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
one_boot(smallTrain)
one_boot(smallTrain)
one_boot(smallTrain)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:5,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3]),mean(all_the_boots[,4])))
}
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(1000)
BS_estimate(1000)
BS_estimate(1000)
train <- read.csv("training.csv")
test = read.csv("testing.csv")
# Predictions for Fraud converted into Numerical data, 1 = Fraud, 0 = Not Fraud
train$FRAUD_NONFRAUD <- ifelse(train$FRAUD_NONFRAUD == "Fraud",1,0)
#look at the data
head(train)
head(test)
#Take out only the numerical data columns and look for any significant relationship
new_train = train[1:5]
new_train$FRAUD_NONFRAUD <- train$FRAUD_NONFRAUD
pairs(new_train)
#To make absolutely sure, look at coorelation values before creating the model
cor(new_train)
model1 = glm( as.factor(FRAUD_NONFRAUD) ~ TRAN_AMT + STATE_PRVNC_TXT, data = train, family = binomial )
#Scenario 3
set.seed(666)
smallData = sample(1:nrow(train), 20, replace=FALSE)
smallTrain = train[smallData,]
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE + DVC_TYPE_TXT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:5,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3]),mean(all_the_boots[,4])))
}
BS_estimate(1000)
BS_estimate(100)
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT + CUST_AGE, data = data[index,], family = "binomial")
return(coef(summary(model))[2:4,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3])))
}
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL + TRAN_AMT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:3,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2]),mean(all_the_boots[,3])))
}
BS_estimate(100)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2])))
}
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ TRAN_AMT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:3,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ TRAN_AMT, data = data[index,], family = "binomial")
return(coef(summary(model))[2:2,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1])))
}
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ TRAN_AMT + ACCT_PRE_TRAN_AVAIL_BAL , data = data[index,], family = "binomial")
return(coef(summary(model))[2:2,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ TRAN_AMT + ACCT_PRE_TRAN_AVAIL_BAL , data = data[index,], family = "binomial")
return(coef(summary(model))[2:3,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1]),mean(all_the_boots[,2])))
}
BS_estimate(100)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL , data = data[index,], family = "binomial")
return(coef(summary(model))[2:3,2])
#This returns a single bootstraped estimate of standard error
}
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL , data = data[index,], family = "binomial")
return(coef(summary(model))[2:2,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1])))
}
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
pairs(smallTrain)
pairs(smallTrain[1:5])
pairs(smallTrain[1:5]<- smallTrain$FRAUD_NONFRAUD)
pairs(smallTrain[1:5]$FRAUD_NONFRAUD <- smallTrain$FRAUD_NONFRAUD)
smallTrain
test = smallTrain[1:5]
test$FRAUD_NONFRAUD = smallTrain$FRAUD_NONFRAUD
pairs(test)
test
smallTrain
smallData = sample(1:nrow(train), 20, replace=FALSE)
smallTrain = train[smallData,]
smallTrain
test = smallTrain[1:5]
test$FRAUD_NONFRAUD = smallTrain$FRAUD_NONFRAUD
pairs(test)
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL , data = data[index,], family = "binomial")
return(coef(summary(model))[2:2,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1])))
}
BS_estimate(100)
corr(test)
cor(test)
gc()
#Data set
library('mlbench')
data(PimaIndiansDiabetes)
Pima = na.omit(PimaIndiansDiabetes)
attach(Pima)
head(Pima)
#Library
install.packages('tree')
library(tree)
set.seed(99)
train =sample(1:nrow(Pima), floor(.7*nrow(Pima)))
tree.diabetes = tree(diabetes ~.-diabetes,data = Pima, subset = train)
tree.pred = predict(tree.diabetes,Pima[-train,], type = "class")
T = table(tree.pred,Pima[-train,'diabetes'])
print(T)
(T[1,1] + T[2,2])/sum(T) #Accuracy
plot(tree.diabetes)
text(tree.diabetes, pretty =0)
#We use cross validation
set.seed(1)
cv.diabetes = cv.tree(tree.diabetes, FUN = prune.misclass)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
plot(cv.diabetes$size, cv.diabetes$dev, type = 'p')
prune.diabetes = prune.misclass(tree.diabetes, best = 6)
plot(prune.diabetes)
text(prune.diabetes, pretty =0)
prunetree.pred = predict(prune.diabetes, Pima[-train,], type = 'class')
T2 = table(prunetree.pred,Pima[-train,'diabetes'])
(T2[1,1]+T2[2,2] )/ sum(T) #Seems better on the test data
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(tree.diabetes)
text(tree.diabetes, pretty =0)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
plot(cv.diabetes$size, cv.diabetes$dev, type = 'p')
cv.diabetes = cv.tree(tree.diabetes, FUN = prune.misclass)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
plot(cv.diabetes$size, cv.diabetes$dev, type = 'p')
#We use cross validation
set.seed(1)
cv.diabetes = cv.tree(tree.diabetes, FUN = prune.misclass)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
train =sample(1:nrow(Pima), floor(.7*nrow(Pima)))
tree.diabetes = tree(diabetes ~.-diabetes,data = Pima, subset = train)
tree.pred = predict(tree.diabetes,Pima[-train,], type = "class")
T = table(tree.pred,Pima[-train,'diabetes'])
print(T)
(T[1,1] + T[2,2])/sum(T) #Accuracy
plot(tree.diabetes)
text(tree.diabetes, pretty =0)
#We use cross validation
set.seed(1)
cv.diabetes = cv.tree(tree.diabetes, FUN = prune.misclass)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
plot(cv.diabetes$size, cv.diabetes$dev, type = 'p')
train =sample(1:nrow(Pima), floor(.7*nrow(Pima)))
tree.diabetes = tree(diabetes ~.-diabetes,data = Pima, subset = train)
tree.pred = predict(tree.diabetes,Pima[-train,], type = "class")
T = table(tree.pred,Pima[-train,'diabetes'])
print(T)
(T[1,1] + T[2,2])/sum(T) #Accuracy
plot(tree.diabetes)
text(tree.diabetes, pretty =0)
#We use cross validation
set.seed(1)
cv.diabetes = cv.tree(tree.diabetes, FUN = prune.misclass)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
plot(cv.diabetes$size, cv.diabetes$dev, type = 'p')
set.seed(99)
train =sample(1:nrow(Pima), floor(.7*nrow(Pima)))
tree.diabetes = tree(diabetes ~.-diabetes,data = Pima, subset = train)
tree.pred = predict(tree.diabetes,Pima[-train,], type = "class")
T = table(tree.pred,Pima[-train,'diabetes'])
print(T)
(T[1,1] + T[2,2])/sum(T) #Accuracy
plot(tree.diabetes)
text(tree.diabetes, pretty =0)
#We use cross validation
set.seed(1)
cv.diabetes = cv.tree(tree.diabetes, FUN = prune.misclass)
cv.diabetes
plot(cv.diabetes$size, cv.diabetes$dev, type = 'l')
plot(cv.diabetes$size, cv.diabetes$dev, type = 'p')
prune.diabetes = prune.misclass(tree.diabetes, best = 6)
plot(prune.diabetes)
text(prune.diabetes, pretty =0)
prunetree.pred = predict(prune.diabetes, Pima[-train,], type = 'class')
T2 = table(prunetree.pred,Pima[-train,'diabetes'])
(T2[1,1]+T2[2,2] )/ sum(T) #Seems better on the test data
source("~/.active-rstudio-document")
install.packages("randomForest")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages(gbm)
install.packages("gbm")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
gc()
source("~/.active-rstudio-document")
sum(Boston[-train,'medv'] - tree.pred)^2
BS_estimate(100)
train <- read.csv("training.csv")
test = read.csv("testing.csv")
# Predictions for Fraud converted into Numerical data, 1 = Fraud, 0 = Not Fraud
train$FRAUD_NONFRAUD <- ifelse(train$FRAUD_NONFRAUD == "Fraud",1,0)
#look at the data
head(train)
head(test)
#Take out only the numerical data columns and look for any significant relationship
new_train = train[1:5]
new_train$FRAUD_NONFRAUD <- train$FRAUD_NONFRAUD
pairs(new_train)
#To make absolutely sure, look at coorelation values before creating the model
cor(new_train)
model1 = glm( as.factor(FRAUD_NONFRAUD) ~ TRAN_AMT + STATE_PRVNC_TXT, data = train, family = binomial )
#Scenario 3
set.seed(666)
smallData = sample(1:nrow(train), 20, replace=FALSE)
smallTrain = train[smallData,]
one_boot <- function(data) {
index <- sample(1:nrow(data), nrow(data), replace=T)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL , data = data[index,], family = "binomial")
return(coef(summary(model))[2:2,2])
#This returns a single bootstraped estimate of standard error
}
one_boot(smallTrain)
BS_estimate <- function(num.boots) {
all_the_boots = c()
for (i in 1:num.boots) {
all_the_boots = rbind(all_the_boots, one_boot(smallTrain))
}
return(c(mean(all_the_boots[,1])))
}
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
BS_estimate(100)
model <- glm(FRAUD_NONFRAUD ~ ACCT_PRE_TRAN_AVAIL_BAL , data = smallTrain, family = "binomial")
summary(model)
